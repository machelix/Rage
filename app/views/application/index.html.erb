<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
  <meta charset="utf-8">
  <style>
      html, body {
          height: 100%;
          width: 100%;
          margin: 0px;
          padding: 0px
      }

      #navbar {
          height: 5%;
          width: 100%;
          margin: 0px;
          padding: 0px;
          float: left;
          background-color: steelblue;
      }

      #map-canvas {
          height: 95%;
          width: 80%;
          margin: 0px;
          padding: 0px;
          float: left;
      }

      #sidebar {
          height: 95%;
          width: 20%;
          margin: 0px;
          padding: 0px;
          float: left;
          background-color: lightblue;
          overflow:scroll;
      }

      .controls {
          margin-top: 16px;
          border: 1px solid transparent;
          border-radius: 2px 0 0 2px;
          box-sizing: border-box;
          -moz-box-sizing: border-box;
          height: 32px;
          outline: none;
          box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      }

      #search-box {
          background-color: #fff;
          padding: 0 11px 0 13px;
          width: 400px;
          font-family: Roboto;
          font-size: 15px;
          font-weight: 300;
          text-overflow: ellipsis;
      }

      #search-box:focus {
          border-color: #4d90fe;
          margin-left: -1px;
          padding-left: 14px;  /* Regular padding-left + 1. */
          width: 401px;
      }

      .pac-container {
          font-family: Roboto;
      }

      #type-selector {
          color: #fff;
          background-color: #4d90fe;
          padding: 5px 11px 0px 11px;
      }

      #type-selector label {
          font-family: Roboto;
          font-size: 13px;
          font-weight: 300;
      }

  </style>
  <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&libraries=places&key=AIzaSyCFfsKnB4D-tWvTK0Y3DXAYwnlkbdg8CWg"></script>
  <script>
      // This example adds a search box to a map, using the Google Place Autocomplete
      // feature. People can enter geographical searches. The search box will return a
      // pick list containing a mix of places and predicted search terms.

      function initialize() {

          var markers = [];
          var map = new google.maps.Map(document.getElementById('map-canvas'), {
              mapTypeId: google.maps.MapTypeId.SATELLITE
          });

          var defaultBounds = new google.maps.LatLngBounds(
                  new google.maps.LatLng(-33.8902, 151.1759),
                  new google.maps.LatLng(-33.8474, 151.2631));
          map.fitBounds(defaultBounds);

          var mgr = new MarkerClusterer(map);

          google.maps.event.addListener(map, 'rightclick', function(event) {
              var image = '<%= asset_path 'blue-pushpin.png' %>'

              marker = addMarkerWatch(map, mgr, image, event.latLng, "Target Location");

              google.maps.event.addListener(marker,'click', function(event) {
                  getTweets(map, event.latLng.lat(), event.latLng.lng());
              });
          });

          // Create the search box and link it to the UI element.
          var input = /** @type {HTMLInputElement} */(
                  document.getElementById('search-box'));
          map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

          var searchBox = new google.maps.places.SearchBox(
                  /** @type {HTMLInputElement} */(input));

          // [START region_getplaces]
          // Listen for the event fired when the user selects an item from the
          // pick list. Retrieve the matching places for that item.
          google.maps.event.addListener(searchBox, 'places_changed', function() {
              var places = searchBox.getPlaces();

              for (var i = 0, marker; marker = markers[i]; i++) {
                  marker.setMap(null);
              }

              // For each place, get the icon, place name, and location.
              markers = [];
              var bounds = new google.maps.LatLngBounds();
              for (var i = 0, place; place = places[i]; i++) {
                  var image = {
                      url: place.icon,
                      size: new google.maps.Size(71, 71),
                      origin: new google.maps.Point(0, 0),
                      anchor: new google.maps.Point(17, 34),
                      scaledSize: new google.maps.Size(25, 25)
                  };

                  // Create a marker for each place.
                  marker = addMarkerWatch(map, mgr, image, place.geometry.location, place.name );

                  google.maps.event.addListener(marker, 'click', function(event) {

                      var myCity = new google.maps.Circle({
                          center: marker.position,
                          radius: 500,
                          strokeOpacity:0.8,
                          strokeWeight:2,
                          fillOpacity:0.4,
                          editable: true
                      });

                      myCity.setMap(map);

                      google.maps.event.addListener(myCity,'radius_changed', function(event) {
                          getTweets(map, marker.getPosition().lat(), marker.getPosition().lng(), myCity.getRadius());
                      });

                      google.maps.event.addListener(myCity,'click', function(event) {
                            getTweets(map, marker.getPosition().lat(), marker.getPosition().lng());
                      });
                  });

                  markers.push(marker);

                  bounds.extend(place.geometry.location);
              }

              map.fitBounds(bounds);
              map.setZoom(15);


          });
          // [END region_getplaces]

          // Bias the SearchBox results towards places that are within the bounds of the
          // current map's viewport.
          google.maps.event.addListener(map, 'bounds_changed', function() {
              var bounds = map.getBounds();
              searchBox.setBounds(bounds);
          });
      }

      google.maps.event.addDomListener(window, 'load', initialize);

      function addMarkerWatch(map, mgr, image, position, title)
      {
          if (mgr.getTotalMarkers() == 0) {
              marker = new google.maps.Marker({ position: position, map: map, title: title, icon: image });
              mgr.addMarker(marker);
          } else {
              mgr.removeMarkers(mgr.getMarkers());
              marker = new google.maps.Marker({ position: position, map: map, title: title, icon: image  });
              mgr.addMarker(marker);
          }
          return marker;
      }
      function getTweets(map,lat,long,radius)
      {
          if(typeof(radius)==='undefined') { radius = '0.5km'
          } else {
              radius = radius / 1000 +  "km"
          }

          $.ajax({
              url: '/twitter',
              type: 'POST',
              dataType: "json",
              async: false,
              data: { lat: lat, lng: long, radius: radius },
              success: function(data) {
                  tweet_locations = [];
                  jQuery.each(data, function(i, val) {

                      if (val.loc == null) {
                          var latlong = calculateLatLong(lat,long)
                          tweet_lat = latlong[0]
                          tweet_long = latlong[1]
                      } else {
                          tweet_lat = val.loc[0]
                          tweet_long = val.loc[1] }

                      // Create a marker for each tweet location
                      var image = '<%= asset_path 'tweet_16_black.png' %>'
                      var tweet_marker = new google.maps.Marker({
                          map: map,
                          icon: image,
                          twitter_handle: val.name,
                          title: val.ts + " : " + val.text,
                          tweet_ts: val.ts,
                          position: new google.maps.LatLng(tweet_lat,tweet_long)
                      });

                      google.maps.event.addListener(tweet_marker,'click', function(){
                          var infowindow = new google.maps.InfoWindow({
                              content: val.name + " : " + val.ts + " : " + val.text
                          });
                          infowindow.open(map,tweet_marker);
                      });
                      tweet_locations.push(tweet_marker);
                  });

                  $('#sidebar').append('<h2>Tweets</h2>');
                  $("#sidebar").append('<dl id="tweet">');

                  // fill side box with tweets
                  jQuery.each(data, function(i, val) {
                      $('#tweet').append($('<dt>').html('http://twitter.com/' + val.name));
                      $('#tweet').append($('<dd>').html(val.text));
                  });

              },
              error: function() {
              }
          });
      }


      function calculateLatLong(lat,lon)
      {
          //Earthâ€™s radius, sphere
          R=6378137

          //offsets in meters
          max_offset = 50
          min_offset = 1
          dn = Math.random() * (max_offset - min_offset) + min_offset;
          de = Math.random() * (max_offset - min_offset) + min_offset;

          //Coordinate offsets in radians
          dLat = dn/R;
          dLon = de/(R*Math.cos(Math.PI*lat/180));

          //OffsetPosition, decimal degrees
          latO = lat + dLat * 180/Math.PI;
          lonO = lon + dLon * 180/Math.PI;

          return [latO.toFixed(8), lonO.toFixed(8)];
      }

  </script>
</head>
<body>
<input id="search-box" class="controls" type="text" placeholder="enter the location address">
<div id="navbar"></div>
<div id="map-canvas"></div>
<div id="sidebar"></div>
</body>
</html>